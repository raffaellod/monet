#!/bin/sh -u
# -*- coding: utf-8; mode: sh; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2018-2023 Raffaello D. Di Napoli
# Distributed under the terms of the GNU General Public License v2

prodname=$(basename $(dirname ${0}))
unset IN_HOTPLUG RC_SVCNAME
. /lib/${prodname}/shared.shlib

# Event handler implementation
#
# Arguments provided through environment variables:
#   af_waiting      Address family waiting for, as defined in dhcpcd.conf(5).
#   ifcarrier       Link status of ${interface}: unknown, up or down.
#   ifmetric        ${interface} preference, lower is better.
#   ifwireless      1 if ${interface} is wireless, otherwise 0.
#   ifflags         ${interface} flags.
#   ifmtu           ${interface} MTU.
#   ifssid          Name of the SSID the interface is connected to.
#   interface_order List of interfaces, in order of preference.
#   if_up           True if the interface is up, otherwise false.
#   if_down         True if the interface is down, otherwise false.
#   interface       Name of the interface.
#   old_*           Old configuration being removed.
#   new_*           New configuration being applied.
#   pid             Pid of dhcpcd.
#   profile         Name of the profile selected from dhcpcd.conf(5).
#   protocol        Protocol that triggered the event.
#   reason          Reason for invocation.

# Renew, autoconfig:
# if_configured='true'
# if_down='false'
# if_up='true'
# ifcarrier='up'
# ifflags='69699'
# ifmetric='1002'
# ifmtu='1500'
# ifwireless='0'
# interface='enp0s0'
# new_broadcast_address='1.2.3.255'
# new_dhcp_lease_time='3600'
# new_dhcp_message_type='5'
# new_dhcp_rebinding_time='3000'
# new_dhcp_renewal_time='1650'
# new_dhcp_server_identifier='1.2.3.2'
# new_domain_name='example.com'
# new_domain_name_servers='1.2.3.2'
# new_ip_address='1.2.3.179'
# new_network_number='1.2.3.0'
# new_routers='1.2.3.2'
# new_subnet_cidr='24'
# new_subnet_mask='255.255.255.0'
# reason='REBIND'

# Link down, autoconfig:
# if_configured='true'
# if_down='true'
# if_up='false'
# ifcarrier='down'
# ifflags='4099'
# ifmetric='1002'
# ifmtu='1500'
# ifwireless='0'
# interface='enp0s0'
# reason='DEPARTED'

# Started, manual config:
# if_configured='false'
# if_down='false'
# if_up='false'
# ifcarrier='up'
# ifflags='69699'
# ifmetric='1002'
# ifmtu='1500'
# ifwireless='0'
# interface='enp0s0'
# reason='PREINIT'

# Link up, manual config:
# if_configured='false'
# if_down='false'
# if_up='true'
# ifcarrier='up'
# ifflags='69699'
# ifmetric='1002'
# ifmtu='1500'
# ifwireless='0'
# interface='enp0s0'
# new_broadcast_address='1.2.3.255'
# new_dhcp_lease_time='3600'
# new_dhcp_message_type='5'
# new_dhcp_rebinding_time='3150'
# new_dhcp_renewal_time='1800'
# new_dhcp_server_identifier='1.2.3.2'
# new_domain_name='example.com'
# new_domain_name_servers='1.2.3.2'
# new_ip_address='1.2.3.179'
# new_network_number='1.2.3.0'
# new_routers='1.2.3.2'
# new_subnet_cidr='24'
# new_subnet_mask='255.255.255.0'
# reason='BOUND'


after_configured() {
   # Test for ${reason} ~ /6$/ .
   if [ "${reason%6}" = "${reason}" ]; then
      # Use DHCP variables.
      dns="${new_domain_name_servers-}"
      search="${new_domain_search-}"
      domain=${new_domain_name-}
   else
      # Use DHCP6 variables.
      dns="${new_dhcp6_name_servers-}"
      search="${new_dhcp6_domain_search-}"
      if [ -n "${new_dhcp6_fqdn-}" ] && [ "${new_dhcp6_fqdn#*.}" != "${new_dhcp6_fqdn}" ]; then
         domain="${new_dhcp6_fqdn#*.}"
      else
         domain=
      fi
   fi
   update_resolv_conf ${interface}
   mark_service_started ${prodname}.${interface}
   /lib/${prodname}/start_scheduled_services_for ${prodname}.${interface}
}

after_deconfigured() {
   mark_service_inactive ${prodname}.${interface}
   unset dns domain search
   update_resolv_conf ${interface}
}

manual_configure() {
   # Use the master interface per configuration, but only if already started.
   # If not, we'll transfer IP configuration once it starts.
   local master=$(conf_get_master ${interface})
   [ -n "${master}" ] && service_started ${prodname}.${master} || master=
   local target_interface=${master:-${interface}}

   logger -t "${prodname}/dhcpcd[${target_interface}]" "adding address ${new_ip_address}/${new_subnet_cidr}"
   if ip address add ${new_ip_address}/${new_subnet_cidr} \
         ${new_broadcast_address:+broadcast ${new_broadcast_address}} \
         scope global dev ${target_interface}; then
      if [ -n "${master}" ]; then
         # Track which slave interface this address belongs to.
         echo "${interface} ${new_ip_address}/${new_subnet_cidr}" >>${bridges_moved_ipaddrs_file}
      fi
   else
      logger -t "${prodname}/dhcpcd[${target_interface}]" "failed to add address ${new_ip_address}"
   fi

   if [ -n "${itfmtu:-}" ]; then
      logger -t "${prodname}/dhcpcd[${interface}]" "setting MTU to ${itfmtu}"
      ip link set ${interface} mtu ${ifmtu}
   fi

   if [ -n "${new_routers:-}" ]; then
      logger -t "${prodname}/dhcpcd[${target_interface}]" "adding routes ${new_routers}"
      local m=${ifmetric-1} gw
      for gw in ${new_routers}; do
         if ip route add default via ${gw} metric ${m} dev ${target_interface} proto boot; then
            if [ -n "${master}" ]; then
               # Track which slave interface this route belongs to.
               echo "${interface} default via ${gw}" >>${bridges_moved_routes_file}
            fi
         else
            logger -t "${prodname}/dhcpcd[${target_interface}]" "failed to add route ${gw}"
         fi
         m=$((m + 1))
      done
   fi
}

manual_deconfigure() {
   local master=$(conf_get_master ${interface})
   [ -n "${master}" ] && service_started ${prodname}.${master} || master=
   local target_interface=${master:-${interface}}

   if [ -n "${old_routers:-}" ]; then
      logger -t "${prodname}/dhcpcd[${target_interface}]" "deleting routes ${old_routers}"
      local gw
      for gw in ${old_routers}; do
         ip route delete default via ${gw} dev ${target_interface}
         if [ -n "${master}" ]; then
            local escaped_gw=$(echo ${gw} | sed -e 's/\./\\./g')
            sed -i -e "/^${interface} default via ${gw}/d" ${bridges_moved_routes_file}
         fi
      done
   fi

   if [ -n "${old_ip_address:-}" ] && [ -n "${old_subnet_cidr:-}" ]; then
      logger -t "${prodname}/dhcpcd[${target_interface}]" "removing address ${new_ip_address}/${new_subnet_cidr}"
      ip address delete ${old_ip_address}/${old_subnet_cidr} dev ${target_interface}
      if [ -n "${master}" ]; then
         local escaped_ipaddr=$(echo ${old_ip_address} | sed -e 's/\./\\./g')
         sed -i -e "/^${interface} ${escaped_ipaddr}\/${old_subnet_cidr}/d" ${bridges_moved_ipaddrs_file}
      fi
   fi
}

#logger -t "${prodname}/dhcpcd[${interface}]" "${reason} \\"
#exec 2>/run/${prodname}/${interface}.dhcpcd.log
#set -x
#set | sed -ne 's/^if\|^\(new\|old\)_\|^\(reason\|interface\)=/export &/p' >/run/${prodname}/${interface}.dhcpcd.vars
case ${reason} in
(BOUND|REBOOT)
   ${if_configured} || manual_configure
   after_configured
   ;;
(REBIND|RENEW)
   # Nothing to do?
   ;;
(EXPIRE|STOP)
   ${if_configured} || manual_deconfigure
   after_deconfigured
   ;;
(DEPARTED|PREINIT)
   # Interface gone or not there yet, respectively. Not really interesting.
   ;;
(*)
   echo "${0##*/}: unhandled: ${reason}" >&2
   ;;
esac
#logger -t "${prodname}/dhcpcd[${interface}]" "${reason} /"
