#!/bin/sh -u
# -*- coding: utf-8; mode: sh; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2022 Raffaello D. Di Napoli
# Distributed under the terms of the GNU General Public License v2

prodname=$(basename $(dirname ${0}))
. /lib/${prodname}/shared.shlib

# ${1}: interface
# ${2}: IP address
# ${3}: hostname
add_to_exported_hosts() {
   local exported_hosts=/run/${prodname}/dnsmasq.${1}.exported_hosts
   if [ -e ${exported_hosts} ]; then
      delete_from_exported_hosts ${1} ${3}
   else
      cat <<-EOF >${exported_hosts}
	# Automatically generated by ${0}
	# DO NOT EDIT

EOF
   fi
   echo "${2} ${3}" >>${exported_hosts}
}

# ${1}: interface
# ${2}: hostname
delete_from_exported_hosts() {
   local exported_hosts=/run/${prodname}/dnsmasq.${1}.exported_hosts
   sed -i -e "/ $(escape_hostname_for_sed "${2}")\$/ d" ${exported_hosts}
}

escape_hostname_for_sed() {
   echo "${1}" | sed -e 's/\./\\&/g'
}

# Event handler implementation
#
# Arguments:
#   1: event
#   2: MAC address (if provided)
#   3: IP address (if assigned)
#   4: hostname (if provided)
# Arguments provided through environment variables:
#   DNSMASQ_CLIENT_ID: client-provided client id (if provided)
#   DNSMASQ_DOMAIN: domain part of the hostâ€™s FQDN (if provided)
#   DNSMASQ_INTERFACE: interface on which the request arrived; not set for
#      "old" actions when dnsmasq restarted.
#   DNSMASQ_LEASE_EXPIRES: time of lease expiry
#   DNSMASQ_OLD_HOSTNAME: provided with an "old" event if a lease used to have
#      a hostname and has now been removed; if changed, another "old" event
#      will follow, with the new hostname
#   DNSMASQ_RELAY_ADDRESS: IP address of the DHCP relay used to contact
#      dnsmasq, if one was
#   DNSMASQ_REQUESTED_OPTIONS: comma-delimited list of Parameter Request List
#      options (if provided)
#   DNSMASQ_SUPPLIED_HOSTNAME: original hostname (if provided)
#   DNSMASQ_TAGS: space-delimited list of tags accumulated during the
#      transaction
#   DNSMASQ_TIME_REMAINING: seconds until lease expiry
#   DNSMASQ_VENDOR_CLASS, DNSMASQ_USER_CLASS0..DNSMASQ_USER_CLASSn: for "add"
#      actions or "old" actions when a host resumes an existing lease (if
#      provided)

add() {
   if [ -n "${DNSMASQ_INTERFACE:-}" ] &&
      [ -n "${2:-}" ] && [ -n "${3:-}" ]; then
      add_to_exported_hosts "${DNSMASQ_INTERFACE}" ${2} ${3}
   fi
}

del() {
   if [ -n "${DNSMASQ_INTERFACE:-}" ] && [ -n "${3:-}" ]; then
      delete_from_exported_hosts "${DNSMASQ_INTERFACE}" ${3}
   fi
}

old() {
   if [ -n "${DNSMASQ_INTERFACE:-}" ]; then
      if [ -n "${DNSMASQ_OLD_HOSTNAME:-}" ]; then
         delete_from_exported_hosts "${DNSMASQ_INTERFACE}" \
            ${DNSMASQ_OLD_HOSTNAME}
      elif [ -n "${2:-}" ] && [ -n "${3:-}" ]; then
         add_to_exported_hosts "${DNSMASQ_INTERFACE}" ${2} ${3}
      fi
   fi
}

case ${1} in
(add|del|old)
   true || cat <<-EOF >>/tmp/dnsmasq.dhcp.log
	Event: ${1}
	MAC: ${2-unset}
	IP: ${3-unset}
	hostname: ${4-unset}
	DNSMASQ_CLIENT_ID: ${DNSMASQ_CLIENT_ID-unset}
	DNSMASQ_DOMAIN: ${DNSMASQ_DOMAIN-unset}
	DNSMASQ_INTERFACE: ${DNSMASQ_INTERFACE-unset}
	DNSMASQ_LEASE_EXPIRES: ${DNSMASQ_LEASE_EXPIRES-unset}
	DNSMASQ_OLD_HOSTNAME: ${DNSMASQ_OLD_HOSTNAME-unset}
	DNSMASQ_RELAY_ADDRESS: ${DNSMASQ_RELAY_ADDRESS-unset}
	DNSMASQ_REQUESTED_OPTIONS: ${DNSMASQ_REQUESTED_OPTIONS-unset}
	DNSMASQ_SUPPLIED_HOSTNAME: ${DNSMASQ_SUPPLIED_HOSTNAME-unset}
	DNSMASQ_TAGS: ${DNSMASQ_TAGS-unset}
	DNSMASQ_TIME_REMAINING: ${DNSMASQ_TIME_REMAINING-unset}
	DNSMASQ_VENDOR_CLASS: ${DNSMASQ_VENDOR_CLASS-unset}
	DNSMASQ_USER_CLASS0: ${DNSMASQ_USER_CLASS0-unset}
EOF
   "${@}"
   ;;
(*)
   echo "${0##*/}: unhandled: ${1}" >&2
   ;;
esac
