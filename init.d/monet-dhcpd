#!/sbin/openrc-run
# -*- coding: utf-8; mode: sh; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2018-2020, 2024 Raffaello D. Di Napoli
# Distributed under the terms of the GNU General Public License v2

prodname=${RC_SVCNAME%%-*}
svcitf="${RC_SVCNAME#*.}"
[ "${svcitf}" != ${RC_SVCNAME} ] || svcitf=
. /etc/${prodname}/${prodname}.conf

depend() {
   need ${svcitf:+${prodname}.${svcitf}}
   use logger
}

if [ -n "${svcitf}" ]; then
   name="DHCP server for ${svcitf}"
else
   name='DHCP server (make a symlink with suffix .interface)'
fi

command=busybox
procname=udhcpd
pidfile=/run/${prodname}/udhcpd.${svcitf}.pid
conffile=/run/${prodname}/udhcpd.${svcitf}.conf
leasesfile=/var/lib/${prodname}/udhcpd.${svcitf}.leases
command_args="-S ${conffile}"
# SIGTERM seems to be ignored? Use SIGHUP instead.
#stopsig=SIGHUP

ip4addr_netid_len_to_netmask() {
   local intmask=$((0xffffffff ^ ((1 << (32 - $1)) - 1)))
   printf '%u.%u.%u.%u' \
      $(((intmask >> 24) & 0xff)) \
      $(((intmask >> 16) & 0xff)) \
      $(((intmask >>  8) & 0xff)) \
      $(( intmask        & 0xff))
}

ip4addr_range_size() {
   set -- $(echo "${1} ${2}" | tr . ' ')
   local ret=$((
      ((${5} - ${1}) << 24) +
      ((${6} - ${2}) << 16) +
      ((${7} - ${3}) <<  8) +
       (${8} - ${4})
  ))
  [ ${ret} -gt 0 ] && echo ${ret} || echo 0
}

ip4addr_replace_hostid() {
   set -- $(echo "${1} ${2} ${3}" | tr . ' ')
   printf '%u.%u.%u.%u' \
      $(((${1} & ${5}) |  ${9})) \
      $(((${2} & ${6}) | ${10})) \
      $(((${3} & ${7}) | ${11})) \
      $(((${4} & ${8}) | ${12}))
}

build_udhcpd_conf() {
   ebegin "Generating udhcpd config file for ${1}"

   local ip4addr=$(
      ip addr show ${1} scope global |
      awk 'sub(/ '${1}'$/, "") && sub(/^ +inet /, "") { print $1; exit }'
   )
   [ -n "${ip4addr}" ] || eend 1 "interface ${1} has no IP addresses" || return 1

   # Generate a netmask, then remove it from ip4addr.
   local netid_len=${ip4addr#*/}
   ip4addr=${ip4addr%/*}
   local netmask=$(ip4addr_netid_len_to_netmask ${netid_len})
   # The default values used here are borrowed from BusyBoxâ€™s udhcpd.c .
   eval local dhcpd_start=\${${1}_dhcpd_start:-0.0.0.20}
   eval local dhcpd_end=\${${1}_dhcpd_end:-0.0.0.254}
   dhcpd_start=$(
      ip4addr_replace_hostid ${ip4addr} ${netmask} ${dhcpd_start}
   )
   dhcpd_end=$(
      ip4addr_replace_hostid ${ip4addr} ${netmask} ${dhcpd_end}
   )
   local dhcpd_range_size=$(ip4addr_range_size ${dhcpd_start} ${dhcpd_end})

   local src_conffile=/etc/${prodname}/udhcpd.${1}.conf
   {
      cat <<-EOF
		# Automatically generated by /etc/init.d/${RC_SVCNAME}
		# DO NOT EDIT
		interface  ${1}
		pidfile    ${pidfile}
		lease_file ${leasesfile}
		start      ${dhcpd_start}
		end        ${dhcpd_end}
		max_leases ${dhcpd_range_size}
		opt subnet ${netmask}
		opt router ${ip4addr}
EOF
      [ -r ${src_conffile} ] && cat <${src_conffile}
   } >${conffile}

   eend 0
}

start_pre() {
   if [ -z "${svcitf}" ]; then
      eerror "${RC_SVCNAME} cannot be started directly; you must create a"
      eerror "symlink to it named /etc/init.d/${RC_SVCNAME}.itf, where itf"
      eerror 'is the name of the network interface over which you want to'
      eerror 'run a DHCP server.'
      return 1
   fi

   mkdir -p /run/${prodname}
   mkdir -p /var/lib/${prodname}
   build_udhcpd_conf ${svcitf}
}
