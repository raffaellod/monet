#!/sbin/openrc-run
# Copyright 2022 Raffaello D. Di Napoli
# Distributed under the terms of the GNU General Public License, v2 or later

extra_started_commands='reload rotate'

prodname=${RC_SVCNAME%%-*}
svcitf="${RC_SVCNAME#*.}"
[ "${svcitf}" != ${RC_SVCNAME} ] || svcitf=
. /etc/${prodname}/${prodname}.conf

depend() {
   provide dns
   need hostname logger ${svcitf:+${prodname}.${svcitf}}
   after bootmisc
}

if [ -n "${svcitf}" ]; then
   name="DNS and DHCP server for ${svcitf}"
else
   name='DNS and DHCP server (make a symlink with suffix .interface)'
fi

pidfile=/run/${prodname}/dnsmasq.${svcitf}.pid
leasesfile=/var/lib/${prodname}/dnsmasq.${svcitf}.leases
extraconffile=/etc/${prodname}/dnsmasq.${svcitf}.conf
hostsdir=/etc/${prodname}/dnsmasq.hosts.d
itfhostsdir=/etc/${prodname}/dnsmasq.${svcitf}.hosts.d
dhcphostsdir=/etc/${prodname}/dnsmasq.dhcphosts.d
itfdhcphostsdir=/etc/${prodname}/dnsmasq.${svcitf}.dhcphosts.d
conffile=/run/${prodname}/dnsmasq.${svcitf}.conf
command=/usr/sbin/dnsmasq
command_args="--conf-file=${conffile}"
retry=TERM/3/TERM/5

ip4addr_netid_len_to_netmask() {
   local intmask=$((0xffffffff ^ ((1 << (32 - $1)) - 1)))
   printf '%u.%u.%u.%u' \
      $(((intmask >> 24) & 0xff)) \
      $(((intmask >> 16) & 0xff)) \
      $(((intmask >>  8) & 0xff)) \
      $(( intmask        & 0xff))
}

ip4addr_replace_hostid() {
   set -- $(echo "${1} ${2} ${3}" | tr . ' ')
   printf '%u.%u.%u.%u' \
      $(((${1} & ${5}) |  ${9})) \
      $(((${2} & ${6}) | ${10})) \
      $(((${3} & ${7}) | ${11})) \
      $(((${4} & ${8}) | ${12}))
}

build_dnsmasq_conf() {
   ebegin "Generating dnsmasq config file for ${1}"

   local ip4addr=$(
      ip addr show ${1} scope global |
      awk 'sub(/ '${1}'$/, "") && sub(/^ +inet /, "") { print $1; exit }'
   )
   [ -n "${ip4addr}" ] || eend 1 "interface ${1} has no IP addresses" || return 1

   # Generate a netmask, then remove it from ip4addr.
   local netid_len=${ip4addr#*/}
   ip4addr=${ip4addr%/*}
   local netmask=$(ip4addr_netid_len_to_netmask ${netid_len})
   # The default values used here are borrowed from BusyBoxâ€™s udhcpd.c .
   eval local dhcpd_start=\${${1}_dhcpd_start:-0.0.0.20}
   eval local dhcpd_end=\${${1}_dhcpd_end:-0.0.0.254}
   dhcpd_start=$(
      ip4addr_replace_hostid ${ip4addr} ${netmask} ${dhcpd_start}
   )
   dhcpd_end=$(
      ip4addr_replace_hostid ${ip4addr} ${netmask} ${dhcpd_end}
   )

   local hostname=$(hostname)
   local domain=${hostname#*.}
   {
      cat <<-EOF
	# Automatically generated by /etc/init.d/${RC_SVCNAME}
	# DO NOT EDIT

	pid-file=${pidfile}
	listen-address=${ip4addr}
	bind-interfaces

	# DNS config

	conntrack
	# Default to no-hosts because user can always add it back via
        # addn-hosts=/etc/hosts if needed.
	no-hosts
	hostsdir=${hostsdir}
	hostsdir=${itfhostsdir}
	# Change DHCP client DNS entries into FQDNs + short CNAMEs.
	domain=${domain}
	# Also change hosts entries into FQDNs + short CNAMEs.
	expand-hosts
	# Add a FQDN for this machine.
	host-record=${hostname},${hostname%%.*},${ip4addr}
	# Make the (sub)domain a CNAME to this gateway.
	cname=${domain},${hostname}

	# DHCP config

	dhcp-authoritative
	dhcp-rapid-commit
	dhcp-hostsdir=${dhcphostsdir}
	dhcp-hostsdir=${itfdhcphostsdir}
	dhcp-leasefile=${leasesfile}
	dhcp-script=/lib/${prodname}/dnsmasq-event
	dhcp-range=${dhcpd_start},${dhcpd_end}
	# TODO: IPv6 range.
EOF
      if [ -r ${extraconffile} ]; then
         echo
         echo "# ${extraconffile}"
         echo
         cat <${extraconffile}
      else
         echo "# ${extraconffile} can replace this line"
      fi
   } >${conffile}

   eend 0
}


reload() {
   ebegin "Reloading ${RC_SVCNAME}"
   start-stop-daemon --signal HUP --pidfile ${pidfile}
   eend ${?}
}

rotate() {
   ebegin "Reopening ${RC_SVCNAME} log file"
   start-stop-daemon --signal USR2 --pidfile ${pidfile}
   eend ${?}
}

start_pre() {
   checkpath --owner dnsmasq:dnsmasq --mode 0644 --file ${leasesfile}
   mkdir -p ${dhcphostsdir} ${hostsdir} ${itfdhcphostsdir} ${itfhostsdir}
   build_dnsmasq_conf ${svcitf}
}
